#autoline 10
#autostart 10
#program marbles

;-------------------------------------------------------------------------------
; VARIABLES
;
; %p() - player state
; i$   - input key
;
;-------------------------------------------------------------------------------

RUN AT 3

ON ERROR GO TO 9200

#define BANKPAL=15
#define BANKSPR=16
#define BANKRND=17
#define BANKNEXTLEVEL=18
#define BANKPLOT=19
#define BANKLIB=20
#define BANKGFX_A=22
#define BANKGFX_B=23

# set debug bank to 21 to load predefined sequence
#define BANKDEBUG=0

; bank graphic offsets
#define OFFSET_BUTTONS=0
#define OFFSET_NEW_GAME_BOX=5120
#define OFFSET_NEXT_LEVEL=10880
#define OFFSET_GAME_OVER=0

; entry points in the marbles.bin library for methods and method constants
#define M_CANMOVE=432
#define M_RANDOMSEED=434
#define M_FN_POPULATEGRID=454
#define M_TAGINDEX=499
#define M_FN_TAG=498

#define POINTER=127
#define POINTERSPR=63
#define COUNTER=126

; user state
#define DEVICE=1
#define SCORE=2
#define BUSY=3
#define BLOCKSLEFT=4
#define BEST=5
#define THEME=6
#define PLOTPTR=7
#define SEED=8
#define LEVEL=9
#define LOAD_PATTERN=10

#define MOUSE=1
#define JOYSTICK=2
#define KEYBAORD=3

#define EMPTY=4

%p(#DEVICE)=#KEYBAORD
%p(#SCORE)=0
%p(#THEME)=%1*5: ; or 2*5
%p(#SEED)=%$1
%p(#BEST)=0

PROC reset()
PROC loadAssets()
PROC mainLoop()

PAUSE 0

DEFPROC mainLoop()
  REPEAT
    PROC selectInput()
    PROC replayGame()

    REPEAT
      PROC readInput()
      IF i$="r" THEN PROC replayGame()
      IF i$="n" THEN PROC newGame()
    REPEAT UNTIL i$="e"
  REPEAT UNTIL 0
ENDPROC

DEFPROC selectInput()
  SPRITE PRINT 0
  CLS

  PAPER 254: INK 255: BORDER 0
  LOAD "assets/welcome.nxi" LAYER

  ; settings loop
  PROC printSettings()
  LET start=0
  REPEAT
    k$= INKEY$
    IF k$="1" THEN %p(#DEVICE)=#MOUSE: PROC printSettings()
    IF k$="2" THEN %p(#DEVICE)=#JOYSTICK: PROC printSettings()
    IF k$="3" THEN %p(#DEVICE)=#KEYBAORD: PROC printSettings()

    IF k$="0" THEN start=1
    IF % IN 31=16 THEN %p(#DEVICE)=#JOYSTICK:start=1
  REPEAT UNTIL start=1

  IF %p(#DEVICE)=#MOUSE THEN PROC installMouse(): DRIVER 126,2,#POINTER,#POINTERSPR
  IF %p(#DEVICE) <> #MOUSE THEN PROC installInput(): SPRITE #POINTER,96,72,#POINTERSPR,1

  IF %(#DEVICE)=#JOYSTICK THEN DRIVER 125,2,3
  IF %(#DEVICE)=#KEYBAORD THEN DRIVER 125,2,5

  SPRITE PRINT 1
  CLS
ENDPROC

DEFPROC printSettings()
  PRINT AT 5,8;"Select your input"
  DIM j$(3,18)
  j$(1)="1. Mouse"
  j$(2)="2. Joystick"
  j$(3)="3. Keyboard (QAOP)"

  FOR %i=1 TO 3
    j=%i
    PRINT AT %(i*2)+8,7; INVERSE %i=p(#DEVICE);j$(j)
  NEXT %i
  INVERSE 0
  PRINT AT %i+13,7;"0. START!"
ENDPROC

DEFPROC readInput()
  i$= INKEY$
  IF %p(#DEVICE)=#MOUSE THEN PROC readMouse(): ELSE PROC readJoystick(): ENDPROC
ENDPROC

DEFPROC readMouse()
  DRIVER 126,1 TO %b,%x,%y
  IF %b&@111 THEN PROC select()
ENDPROC

DEFPROC readJoystick()
  DRIVER 125,4,1
  REM 12345678901234567890123456789012345678901234567890
ENDPROC

DEFPROC select()
  %i=%( SPRITE OVER (#POINTER,0 TO 99)): ; which block are we over when we selected

  ; colliding 0 sprite returns 128 (can't remember why though!)
  IF %i=128 THEN %i=0

;   PROC pad2(%i) TO s$
;   PRINT AT 10,21;"SELECT  ";s$;%i

  IF %i > 99 THEN ENDPROC : ; out of scope

  IF %p(#BUSY) THEN ENDPROC

  PROC selectBlock()
ENDPROC

; %i = selected block
; Uses: %c, %i, %t
; Modifies: %p
DEFPROC selectBlock()
  IF %p(#BUSY) THEN ENDPROC

  %p(#BUSY)=1

  ; load %i into tagIndex
  BANK #BANKLIB POKE #M_TAGINDEX,%i
  ; call Tag()
  %t=% BANK #BANKLIB USR #M_FN_TAG

  ; %t contains the address of the number of blocks tagged
  %c=% BANK #BANKLIB PEEK t

  IF %c < 2 THEN %p(#BUSY)=0: ENDPROC

  %p(#SCORE)=%p(#SCORE)+(c*(5+c))
  %p(#BLOCKSLEFT)=%p(#BLOCKSLEFT)-c
  BANK #BANKPLOT POKE %p(#PLOTPTR),%i: ; store the block cleared
  %p(#PLOTPTR)=%p(#PLOTPTR)+1

  IF %p(#SCORE) > p(#BEST) THEN %p(#BEST)=%p(#SCORE)

  ; clear the tagged blocks
  FOR %i=1 TO %c
    SPRITE % BANK #BANKLIB PEEK (t+i),,,#EMPTY,
  NEXT %i

  INK 50
  PROC pad2(%c) TO s$
  PRINT AT 3,21;"CLEARED ";s$;%c
  PROC pad2(%p(#PLOTPTR)-2) TO s$
  PRINT AT 4,21;"MOVES   ";s$;%(p(#PLOTPTR)-2)
  PROC pad2(%p(#BLOCKSLEFT)) TO s$
  PRINT AT 5,21;"REMAIN  ";s$;%p(#BLOCKSLEFT)
  INK 255
  PROC pad4(%p(#SCORE)) TO s$
  PRINT AT 2,21;"SCORE ";s$;%p(#SCORE)

  ; now full render
  %c=100
  REPEAT
    %c=%c-1
    %i=% BANK #BANKLIB PEEK c
    IF %i < 255 THEN %i=%i+p(#THEME): ELSE %i=#EMPTY
    SPRITE %c,,,%i,

    ; slow down the render a little
;     IF %(n MOD 10)=0 THEN PROC readInput()
  REPEAT UNTIL %c=0

  %p(#BUSY)=0

  IF %( BANK #BANKLIB PEEK #M_CANMOVE)=0 THEN %p(#BUSY)=1: PAUSE 10: PROC gameOver()
  IF %p(#BLOCKSLEFT)=0 THEN PROC nextLevel()


ENDPROC

DEFPROC gameOver()
  LOCAL %i
  LOCAL %j
  %i=0
  %j=0
  i$=""
  REPEAT
    PROC readInput()
    IF %j&7=0 THEN : BANK #BANKGFX_B LAYER %(2560*i) TO 6,22,20,2:%i=%(i+1) MOD 4
    %j=%j+1
    i$= INKEY$
  REPEAT UNTIL (i$="r") OR (i$="n") OR (i$="e")

  ; clear the section that showed game over
  BANK 11 ERASE 12288,4096,0

ENDPROC

; param {int} %i
; returns {string} hex string
; uses: %j, h$, r$, p
DEFPROC toHex(%i)
  %j=4: ; symbols (2 bytes = 4 symbols)
  h$="0123456789abcdef"
  r$=""
  REPEAT : WHILE %j <> 0
    %j=%j-1
    p=%(i&$f)+1
    r$=h$(p)+r$
    %i=%i >> 4
  REPEAT UNTIL 0
ENDPROC =r$

DEFPROC fromHex(s$)
  LOCAL i: ; counter (since we need to splice)
  LOCAL %j: ; int value for i
  LOCAL %l: ; string length
  LOCAL %r: ; return value
  LOCAL c$: ; current char
  LOCAL %i: ; numeric value of current char

  %l= LEN (s$)

  %r=0

  FOR i=%l TO 1 STEP -1
    c$=s$(i TO i)
    %i= CODE c$
    IF %i > $46 THEN %i=%i-$20: ; to uppercase
    IF %i > $39 THEN %i=%i-$37: ELSE %i=%i-$30: ; to number

    %j=i
    %r=%r+((i)*(1 << ((l-j)*4)))
;     PRINT c$;"-";%i;"-";%1 << ((l-j)*4)
  NEXT i
ENDPROC =%r

DEFPROC nextLevel()
  %p(#LEVEL)=%p(#LEVEL)+1

  ; show Next Level box
  BANK #BANKGFX_A LAYER #OFFSET_NEXT_LEVEL TO 5,9,10,6

  SPRITE #COUNTER,97,116,58,1, BIN 0,1,1
  SPRITE #COUNTER-1,97,116,62,1, BIN 0,1,1: ; put a sprite under the countdown that's solid white, just in case we hide the counter before we clear the screen
  SPRITE CONTINUE #COUNTER, STOP , STOP ,58 TO 61, BIN 01100000,60,60: ; count down effect

  REPEAT
    SPRITE MOVE INT
  REPEAT UNTIL % SPRITE #COUNTER=0

  SPRITE #COUNTER-1,,,,0: ; remove the backing sprite

  ; remove only the "new level" box that we painted
  LAYER ERASE 40,72,80,48
  PROC printSeed()
  PROC loadBlocks()
ENDPROC

DEFPROC startGame(%s)
  SPRITE PRINT 0
  %p(#LEVEL)=1
  %p(#SCORE)=0
  %p(#BUSY)=0
  BANK #BANKPLOT ERASE
  BANK #BANKPLOT DPOKE 0,%s: ; first 16bit word is the seed
  %p(#PLOTPTR)=2
  PROC setSeed(%s)

  ; clear any blocks already on the board
  %c=100
  REPEAT
    %c=%c-1
    %i=% BANK #BANKLIB PEEK c
    IF %i < 255 THEN SPRITE %c,,,,0: ; only clear them if they're visible
  REPEAT UNTIL %c=0

  SPRITE PRINT 1

  IF #BANKDEBUG=0 THEN PROC loadBlocks(): ENDPROC

  ; DEBUG - repeat a game sequence
  LOAD "./ABOUT-TO-WIN.BIN" BANK #BANKDEBUG

  %i=% BANK #BANKDEBUG DPEEK 0
  PROC setSeed(%i)

  PROC loadBlocks()
  LOCAL %i
  LOCAL %z
  %z=2
  REPEAT
    %i=% BANK #BANKDEBUG PEEK z
    WHILE %i <> 255
    PRINT AT 11,21;"BRICK ";%i;"@";%z;" "
    PROC selectBlock()
    PAUSE 10
    %z=%z+1
  REPEAT UNTIL 0
ENDPROC

DEFPROC replayGame()
  PROC startGame(%p(#SEED))
ENDPROC

DEFPROC newGame()
  %s=%1+ RND $fffe

  PROC toHex(%s) TO s$

  BANK #BANKGFX_A LAYER #OFFSET_NEW_GAME_BOX TO 3,9,15,6
  INK 252: ; priority black
  PAPER 250: ; light grey background
  PRINT CHR$ 29;1; CHR$ 28;1; : ; turn on big
  PRINT AT 12,6;s$; CHR$ 138

  %i=0
  ; wait until the key is clear
  REPEAT : REPEAT UNTIL INKEY$ =""
  %j=14
  c$=s$
  REPEAT
    i$= INKEY$

    %c= CODE i$
    ; del key
    IF %c=12 THEN PRINT AT 12,%j;" ":%j=%j-2:j=%j:c$=c$(1 TO 1+((j/2)-3))
    IF %j < 6 THEN %j=6

    PROC tryToPrintChr()

    IF i$ <> "" THEN INK 252: ELSE : IF %i THEN INK 250: ELSE INK 252
    PRINT AT 12,%j; CHR$ 138
    %i=%(i+1) MOD 2

    PAUSE 36
  REPEAT UNTIL %c=13: ; return key

  LAYER ERASE 24,72,120,48

  ; reset font sizes
  PRINT CHR$ 29;0; CHR$ 28;0; : ; turn off big
  INK 255: PAPER 0

  PROC fromHex(c$) TO %s: ; convert the text to a numeric value
  PROC startGame(%s)
ENDPROC

DEFPROC tryToPrintChr()
  IF %c < $30 THEN ENDPROC : ; numeric lower
  IF %c > $66 THEN ENDPROC : ; alpha upper

  IF %(c > $39) AND (c < $61) THEN ENDPROC : ; in between

  IF (c$="000") AND (i$="0") THEN ENDPROC : ; prevent 0000

  IF %j=14 THEN ENDPROC : ; no room left
  c=%c
  INK 252
  PRINT AT 12,%j; CHR$ c
  c$=c$+ CHR$ c
  %j=%j+2
ENDPROC

DEFPROC loadBlocks()
  %p(#BLOCKSLEFT)=100

  INK 50
  PRINT AT 3,21;"CLEARED   0"
  PRINT AT 4,21;"MOVES     0"
;   PRINT AT 5,21;"REMAIN  100"Â£
  INK 255
  PRINT AT 2,21;"SCORE     0"
  PROC pad4(%p(#LEVEL)) TO s$
  PRINT AT 7,21;"LEVEL ";s$;%p(#LEVEL)

  BANK #BANKGFX_A LAYER #OFFSET_BUTTONS TO 22,14,10,8

  ; call PopulateGrid
  %n=% BANK #BANKLIB USR #M_FN_POPULATEGRID

  IF %p(#LOAD_PATTERN)=6 THEN RESTORE :%p(#LOAD_PATTERN)=0
  %p(#LOAD_PATTERN)=%p(#LOAD_PATTERN)+1

  ; this uses a predefined order to render the blocks in a circle which makes
  ; for a nice effect
  %n=100
  REPEAT
    %n=%n-1
    READ %j
    %r=% BANK #BANKLIB PEEK j
    PROC toXY(%j) TO %x,%y
    SPRITE %j,%(x*16)+32,%(y*16)+48,%r+p(#THEME),1
    %a[j]=%r
    IF %n > 50 THEN PAUSE 1
  REPEAT UNTIL %n=0
ENDPROC

DEFPROC toXY(%n)
  %x=%n MOD 10
  %y=%n/10
ENDPROC =%x,%y

DEFPROC setSeed(%s)
  BANK #BANKLIB DPOKE %#M_RANDOMSEED,%s
  %p(#SEED)=%s
  PROC printSeed()
ENDPROC

DEFPROC printSeed()
  %s=%p(#SEED)
  PROC toHex(%s) TO s$
  INK 50
  PRINT AT 8,21;"SEED  #";s$
  PROC pad4(%p(#BEST)) TO s$
  PRINT AT 9,21;"BEST  ";s$;%p(#BEST)
ENDPROC

DEFPROC pad4(%w)
  IF %w < 10 THEN ENDPROC ="    "
  IF %w < 100 THEN ENDPROC ="   "
  IF %w < 1000 THEN ENDPROC ="  "
  IF %w < 10000 THEN ENDPROC =" "
ENDPROC =""

DEFPROC pad2(%w)
  IF %w < 10 THEN ENDPROC ="  "
  IF %w < 100 THEN ENDPROC =" "
ENDPROC =""

DEFPROC onAnyKey()
  PRINT AT 10,21;"Press key"
  REPEAT : REPEAT UNTIL INKEY$ =""
  REPEAT : REPEAT UNTIL INKEY$ <> "" OR ( IN 31=16)
  REPEAT : REPEAT UNTIL INKEY$ =""
  PRINT AT 10,21;"         "
ENDPROC

DEFPROC loadAssets()
  BORDER 0: PAPER 0: CLS
  LOAD "./assets/font.bin" CODE 64000
  DPOKE 23606,63744: ; 64000-256 (256 = 8 * 32 control chars)
  LAYER 2,1
  PRINT CHR$ 2: ; trigger the font to be loaded on layer 2

  LOAD "assets/over-next-level.bin" BANK #BANKNEXTLEVEL
  LOAD "assets/buttons.nxi" BANK #BANKGFX_A,#OFFSET_BUTTONS,5120
  LOAD "assets/new-game.nxi" BANK #BANKGFX_A,#OFFSET_NEW_GAME_BOX,5760
  LOAD "assets/next-level-small.nxi" BANK #BANKGFX_A,#OFFSET_NEXT_LEVEL,3840: ; sum = 15680
  LOAD "assets/game-over.nxi" BANK #BANKGFX_B,#OFFSET_GAME_OVER,10240

  ; marbles library
  LOAD "assets/marbles.bin" BANK #BANKLIB

  ; shadow L2 ends at 14, so we start at 15
  LOAD "assets/marbles.pal" BANK #BANKPAL
  LAYER PALETTE 0 BANK #BANKPAL,0
  SPRITE PALETTE 0 BANK #BANKPAL,0
  ; custom black and white
  BORDER 0: INK 255: PAPER 254: CLS

  LOAD "assets/marbles.spr" BANK #BANKSPR
  SPRITE BANK #BANKSPR
  SPRITE PRINT 1
  SPRITE BORDER 1

  POKE 23658,0: ; turn off CAPS LOCK (for menu items)
ENDPROC

DEFPROC reset()
  SPRITE PRINT 0
  SPRITE CLEAR
  LAYER CLEAR
  PALETTE CLEAR
  LAYER 0
  CLS
ENDPROC

##########################################
# Joystick 1 callback procedures
# - MUST use these exactly procedure names
##########################################
DEFPROC U1()
  LOCAL %y
  %y=% SPRITE AT (#POINTER,1)
  IF %y > 1 THEN SPRITE #POINTER,,%y-1,,,
ENDPROC
DEFPROC L1()
  LOCAL %x
  %x=% SPRITE AT (#POINTER,0)
  IF %x > 1 THEN SPRITE #POINTER,%x-1,,,,
ENDPROC
DEFPROC D1()
  LOCAL %y
  %y=% SPRITE AT (#POINTER,1)
  IF %y < (256-1) THEN SPRITE #POINTER,,%y+1,,,
ENDPROC
DEFPROC R1()
  LOCAL %x
  %x=% SPRITE AT (#POINTER,0)
  IF %x < (320-1) THEN SPRITE #POINTER,%x+1,,,,
ENDPROC
DEFPROC F1()
  PROC select()
ENDPROC
DEFPROC F2()
  PROC select()
ENDPROC
DEFPROC F3()
  PROC select()
ENDPROC

DEFPROC onAnyKey()
  REPEAT : REPEAT UNTIL INKEY$ =""
  REPEAT : REPEAT UNTIL INKEY$ <> "" OR ( IN 31=16)
  REPEAT : REPEAT UNTIL INKEY$ =""
ENDPROC

; inside out
DATA 54,55,45,44,43,53,63,64,65,66,56,46,36,35,34,33,32,42,52,62,72,73,74,75,76,77,67,57,47,37,27,26,25,24,23,22,21,31,41,51,61,71,81,82,83,84,85,86,87,88,78,68,58,48,38,28,18,17,16,15,14,13,12,11,10,20,30,40,50,60,70,80,90,91,92,93,94,95,96,97,98,99,89,79,69,59,49,39,29,19,9,8,7,6,5,4,3,2,1,0

; zig zag
DATA 90,91,92,93,94,95,96,97,98,99,89,88,87,86,85,84,83,82,81,80,70,71,72,73,74,75,76,77,78,79,69,68,67,66,65,64,63,62,61,60,50,51,52,53,54,55,56,57,58,59,49,48,47,46,45,44,43,42,41,40,30,31,32,33,34,35,36,37,38,39,29,28,27,26,25,24,23,22,21,20,10,11,12,13,14,15,16,17,18,19,9,8,7,6,5,4,3,2,1,0

; rotated swipe
DATA 90,80,91,70,81,92,60,71,82,93,50,61,72,83,94,40,51,62,73,84,95,30,41,52,63,74,85,96,20,31,42,53,64,75,86,97,10,21,32,43,54,65,76,87,98,0,11,22,33,44,55,66,77,88,99,1,12,23,34,45,56,67,78,89,2,13,24,35,46,57,68,79,3,14,25,36,47,58,69,4,15,26,37,48,59,5,16,27,38,49,6,17,28,39,7,18,29,8,19,9

; outside in
DATA 0,1,2,3,4,5,6,7,8,9,19,29,39,49,59,69,79,89,99,98,97,96,95,94,93,92,91,90,80,70,60,50,40,30,20,10,11,12,13,14,15,16,17,18,28,38,48,58,68,78,88,87,86,85,84,83,82,81,71,61,51,41,31,21,22,23,24,25,26,27,37,47,57,67,77,76,75,74,73,72,62,52,42,32,33,34,35,36,46,56,66,65,64,63,53,43,44,45,55,54

; crawl
DATA 90,80,91,70,92,82,93,95,96,72,81,94,85,97,84,98,62,99,87,75,60,71,83,88,78,89,74,65,86,52,73,63,76,50,61,55,79,68,66,77,45,69,59,64,54,40,51,42,32,44,53,49,57,67,56,35,30,41,22,34,46,58,39,48,25,36,31,20,43,21,12,10,38,47,0,33,15,26,29,37,24,11,2,23,16,5,19,27,14,9,1,4,28,17,13,7,6,18,3,8

; two columns
DATA 90,99,80,89,70,79,60,69,50,59,40,49,30,39,20,29,10,19,0,9,91,98,81,88,71,78,61,68,51,58,41,48,31,38,21,28,11,18,1,8,92,97,82,87,72,77,62,67,52,57,42,47,32,37,22,27,12,17,2,7,93,96,83,86,73,76,63,66,53,56,43,46,33,36,23,26,13,16,3,6,94,95,84,85,74,75,64,65,54,55,44,45,34,35,24,25,14,15,4,5

# these lines need to numbered so that they can error and GOTO the right lines
# whereas in autoline I can't use GOTO. The error handler also sits at the root
# of the scope (i.e. not in a DEFPROC) so that I can cleanly get the error during
# debugging.
#autoline
9000 DEFPROC installMouse()
9010 ON ERROR GO TO 9030
9020 .uninstall /nextzxos/mouse.drv
9030 .install /nextzxos/mouse.drv
9040 ON ERROR
9050 ENDPROC

9060 DEFPROC installInput()
9070 ON ERROR GO TO 9090
9080 .uninstall assets/input.drv
9090 .install assets/input.drv
9100 ON ERROR
9110 ENDPROC

# error handling needs to be outside a proc
9200 ERROR TO err,lin,st
9210 e$= STR$ err
9220 ON ERROR
9230 LAYER 2,1
9240 PALETTE CLEAR
9250 LAYER CLEAR
9260 SPRITE CLEAR
9270 BORDER 7: INK 0: PAPER 7
9280 CLS
9290 SPRITE PRINT 0: ; turn off sprites
9300 PRINT "Error:";e$;", line:";lin;", statement:";st
9310 REPEAT : REPEAT UNTIL INKEY$ =""
9320 REPEAT : REPEAT UNTIL INKEY$ <> "" OR ( IN 31=16)
9330 REPEAT : REPEAT UNTIL INKEY$ =""

