#autoline 10
#autostart 10
#program marbles

;-------------------------------------------------------------------------------
; VARIABLES
;
; %a[] - complete virtual grid of blocks and state
; %c[] - collected blocks when selection is made
; %p() - player state
;
; BUGS
; - [ ] If col 0 is empty it'll remain empty
;-------------------------------------------------------------------------------

RUN AT 3

#define BANKPAL=15
#define BANKSPR=16
#define BANKRND=17
#define BANKNEXTLEVEL=18
#define BANKPLOT=19

#define GRIDSTART=22

#define POINTER=127
#define POINTERSPR=63
#define COUNTER=126

#define DEVICE=1
#define SCORE=2
#define BUSY=3
#define BLOCKSLEFT=4
#define BEST=5
#define THEME=6
#define PLOTPTR=7
#define SEED=8
#define LEVEL=9

#define MOUSE=1
#define JOYSTICK=2
#define KEYBAORD=3

#define EMPTY=4

#define XMIN=0
#define XMAX=1
#define YMIN=2

%p(#DEVICE)=#KEYBAORD
%p(#SCORE)=0
%p(#THEME)=%1*5: ; or 2
%p(#SEED)=%$13b2
%p(#BEST)=1036

PROC reset()
PROC loadAssets()
PROC selectInput()
PROC replayGame()

PROC mainLoop()

PAUSE 0

DEFPROC mainLoop()
  %i=0
  REPEAT
    PROC readInput()
    IF INKEY$ ="r" THEN PROC replayGame()
    IF INKEY$ ="n" THEN PROC newGame()
  REPEAT UNTIL 0
ENDPROC

DEFPROC nextLevel()
  %p(#LEVEL)=%p(#LEVEL)+1
  ; show Next Level box
  BANK #BANKNEXTLEVEL COPY TO 10

  ; FIXME test why the sprites aren't rendering over the layer even though it has priority on the palette
  SPRITE #COUNTER,97,113,58,1, BIN 0,1,1
  SPRITE #COUNTER-1,97,113,62,1, BIN 0,1,1: ; put a sprite under the countdown that's solid white, just in case we hide the counter before we clear the screen
  SPRITE CONTINUE #COUNTER, STOP , STOP ,58 TO 61, BIN 01100000,60,60: ; count down effect

  REPEAT
    SPRITE MOVE INT
  REPEAT UNTIL % SPRITE #COUNTER=0

  SPRITE #COUNTER-1,,,,0: ; remove the backing sprite

  CLS
  PROC printSeed()
  PROC loadBlocks()
ENDPROC

DEFPROC selectInput()
  PAPER 254: INK 255: BORDER 0
  LOAD "assets/welcome.nxi" LAYER

  ; settings loop
  PROC printSettings()
  LET start=0
  REPEAT
    k$= INKEY$
    IF k$="1" THEN %p(#DEVICE)=#MOUSE: PROC printSettings()
    IF k$="2" THEN %p(#DEVICE)=#JOYSTICK: PROC printSettings()
    IF k$="3" THEN %p(#DEVICE)=#KEYBAORD: PROC printSettings()

    IF k$="0" THEN start=1
    IF % IN 31=16 THEN %p(#DEVICE)=#JOYSTICK:start=1
  REPEAT UNTIL start=1

  IF %p(#DEVICE)=#MOUSE THEN PROC installMouse(): DRIVER 126,2,#POINTER,#POINTERSPR
  IF %p(#DEVICE) <> #MOUSE THEN PROC installInput(): SPRITE #POINTER,96,72,#POINTERSPR,1

  IF %(#DEVICE)=#JOYSTICK THEN DRIVER 125,2,3
  IF %(#DEVICE)=#KEYBAORD THEN DRIVER 125,2,5

  CLS
ENDPROC

DEFPROC printSettings()
  PRINT AT 5,8;"Select your input"
  DIM j$(3,18)
  j$(1)="1. Mouse"
  j$(2)="2. Joystick"
  j$(3)="3. Keyboard (QAOP)"

  FOR %i=1 TO 3
    j=%i
    PRINT AT %(i*2)+8,7; INVERSE %i=p(#DEVICE);j$(j)
  NEXT %i
  INVERSE 0
  PRINT AT %i+13,7;"0. START!"
ENDPROC

DEFPROC readInput()
  IF %p(#DEVICE)=#MOUSE THEN PROC readMouse(): ELSE PROC readJoystick(): ENDPROC
ENDPROC

DEFPROC readMouse()
  DRIVER 126,1 TO %b,%x,%y
  IF %b&@111 THEN PROC selectBlock(%x,%y)
ENDPROC

DEFPROC readJoystick()
  DRIVER 125,4,1
  REM 12345678901234567890123456789012345678901234567890
ENDPROC

DEFPROC selectBlock()
  IF %p(#BUSY) THEN ENDPROC
  %p(#BUSY)=1

  %i=%( SPRITE OVER (#POINTER,0 TO 99)): ; which block are we over when we selected

  IF %i > 99 THEN %p(#BUSY)=0: ENDPROC : ; out of scope

  %x=%( SPRITE AT (i,0)-32) >> 4
  %y=%( SPRITE AT (i,1)-48) >> 4
  %b=%( SPRITE AT (i,2))-p(#THEME): ; manual offset

  IF %a[i]=#EMPTY THEN %p(#BUSY)=0: ENDPROC : ; empty block

  %c=0: ; c is the pointer in the %c[] array
  %c[c]=-1: ; %c[] is the collected blocks taggged

  PROC tag(%b,%x,%y)

  IF %c < 2 THEN %p(#BUSY)=0: ENDPROC

  BANK #BANKPLOT POKE %p(#PLOTPTR),%c[0]
  %p(#PLOTPTR)=%p(#PLOTPTR)+1

  %p(#BLOCKSLEFT)=%p(#BLOCKSLEFT)-c
  %p(#SCORE)=%p(#SCORE)+(c*(5+c))

  INK 50
  PROC pad2(%c) TO s$
  PRINT AT 3,21;"CLEARED ";s$;%c
  PROC pad2(%p(#BLOCKSLEFT)) TO s$
  PRINT AT 4,21;"REMAIN  ";s$;%p(#BLOCKSLEFT)
  INK 255
  PROC pad4(%p(#SCORE)) TO s$
  PRINT AT 2,21;"SCORE ";s$;%p(#SCORE)

  ; this helps me calculate the area to move blocks - which means less itterations
  %z(#XMIN)=9
  %z(#XMAX)=0
  %z(#YMIN)=0
  ; remove the selected blocks
  FOR %i=%0 TO %(c-1)
;     SPRITE %c[i],,,55,
    %a[c[i]]=#EMPTY

    PROC toXY(%c[i]) TO %x,%y
    IF %x < z(#XMIN) THEN %z(#XMIN)=%x
    IF %x > z(#XMAX) THEN %z(#XMAX)=%x
    IF %y > z(#YMIN) THEN %z(#YMIN)=%y

    ; allow UI to tick
    PROC readInput()
  NEXT %i

  %x=%z(#XMIN)
  %z(#XMAX)=%z(#XMAX)+1
  ; marginly faster than doing a FOR x TO loop
  REPEAT : WHILE %x <> z(#XMAX)
    %y=%z(#YMIN)
    REPEAT : WHILE %y <> -1
      %i=%(10*y)+x
      IF %a[i]=#EMPTY THEN PROC clearColumn(%i,%x,%y):%y=0: ; IF %f THEN %y=%y+1

      ; allow UI to tick
      PROC readInput()

      %y=%y-1
    REPEAT UNTIL 0
    %x=%x+1
  REPEAT UNTIL 0

  ; now collapse the columns
  %x=%z(#XMIN)
  %z=%-1
  REPEAT : WHILE %x <> 10
    %i=%90+x
    IF %a[i]=#EMPTY THEN %z=%x: ELSE : IF %z <> -1 THEN PROC shiftColumn(%x,%z):%z=%-1:%x=0
    %x=%x+1
  REPEAT UNTIL 0

  IF %p(#BLOCKSLEFT)=0 THEN PROC nextLevel()

  %p(#BUSY)=0
ENDPROC

DEFPROC shiftColumn(%x,%z)
  %y=%0
  REPEAT : WHILE %y < 10
    %a=%10*y
    %i=%a+x: ; left
    %j=%a+z: ; right

    %a=%a[i]
    %a[i]=%a[j]
    SPRITE %i,,,%a[j]+p(#THEME),
    %a[j]=%a
    SPRITE %j,,,%a+p(#THEME),

    PROC readInput()

    %y=%y+1
  REPEAT UNTIL 0

ENDPROC

DEFPROC clearColumn(%i,%x,%y)
  REPEAT
    %y=%y-1
    %t=%(10*y)+x

    WHILE %y <> -1: ; break

    ; if we hit a block, then swap it's position
    IF %a[t] <> #EMPTY THEN PROC clearColumnSwap()

    ; allow UI to tick
    PROC readInput()
  REPEAT UNTIL 0
ENDPROC

; mutate values
DEFPROC clearColumnSwap()
  ; swap the blocks at %i and %t
  %a=%a[i]
  %a[i]=%a[t]
  SPRITE %i,,,%a[t]+p(#THEME),
  %a[t]=%a
  SPRITE %t,,,%a+p(#THEME),

  ; cycle to the block directly above
  %i=%i-10
ENDPROC

DEFPROC tag(%b,%x,%y)

  IF %x > 9 THEN ENDPROC
  IF %y > 9 THEN ENDPROC

  %i=%(10*y)+x

  IF %i > 99 THEN ENDPROC : ; out of bounds
  IF %b <> a[i] THEN ENDPROC : ; not a match

  %j=%0
  %t=%0

  ; array.includes?
  REPEAT
    IF %c THEN IF %c[j]=i THEN %t=%1
    ; allow UI to tick
    PROC readInput()
    %j=%j+1
  REPEAT UNTIL %(j >= c) OR (t=1)
  IF %t THEN ENDPROC

  %c[c]=%i

  ; remove the sprites as we find them (so long as we find 2 or more)
  IF %c THEN SPRITE %c[c],,,#EMPTY,
  IF %c=1 THEN SPRITE %c[0],,,#EMPTY,

  %c=%c+1

  ; allow UI to tick
  PROC readInput()

  ; now search for more
  PROC tag(%b,%x-1,%y)
  PROC tag(%b,%x+1,%y)
  PROC tag(%b,%x,%y-1)
  PROC tag(%b,%x,%y+1)

ENDPROC

; param {int} %i
; returns {string} hex string
; uses: %j, h$, r$, p
DEFPROC toHex(%i)
  %j=4: ; symbols (2 bytes = 4 symbols)
  h$="0123456789abcdef"
  r$=""
  REPEAT : WHILE %j <> 0
    %j=%j-1
    p=%(i&$f)+1
    r$=h$(p)+r$
    %i=%i >> 4
  REPEAT UNTIL 0
ENDPROC =r$

DEFPROC startGame(%s)
  %p(#LEVEL)=1
  %p(#SCORE)=0
  %p(#PLOTPTR)=0
  BANK #BANKPLOT ERASE
  PROC setSeed(%s)
  PROC loadBlocks()
ENDPROC

DEFPROC replayGame()
  PROC startGame(%p(#SEED))
ENDPROC

DEFPROC newGame()
  PROC startGame(%1+ RND $fffe)
ENDPROC

DEFPROC loadBlocks()
  %p(#BLOCKSLEFT)=100

  INK 50
  PRINT AT 3,21;"CLEARED   0"
  PRINT AT 4,21;"REMAIN  100"
  INK 255
  PRINT AT 2,21;"SCORE     0"
  PROC pad4(%p(#LEVEL)) TO s$
  PRINT AT 6,21;"LEVEL ";s$;%p(#LEVEL)

  %n=0
  REPEAT
    PROC pickRandom() TO %r
    PROC toXY(%n) TO %x,%y
    SPRITE %n,%(x*16)+32,%(y*16)+48,%r+p(#THEME),0
    %a[n]=%r
    %n=%n+1
  REPEAT UNTIL %n=100

  %n=0
  REPEAT
    SPRITE %n,,,,1
    %n=%n+1
  REPEAT UNTIL %n=100
ENDPROC

DEFPROC testRnd()
  LAYER 2,1
  CLEAR
  CLS

  SPRITE PRINT 0
  %n=0
  REPEAT
    PROC pickRandom() TO %r
    PRINT %r
    %n=%n+1
  REPEAT UNTIL %n=100

ENDPROC

DEFPROC toXY(%n)
  %x=%n MOD 10
  %y=%n/10
ENDPROC =%x,%y

DEFPROC setSeed(%s)
  BANK #BANKRND DPOKE %1,%s
  %p(#SEED)=%s
  PROC printSeed()
ENDPROC

DEFPROC printSeed()
  %s=%p(#SEED)
  PROC toHex(%s) TO s$
  INK 50
  PRINT AT 7,21;"SEED  #";s$
  PROC pad4(%p(#BEST)) TO s$
  PRINT AT 8,21;"BEST  ";s$;%p(#BEST)
ENDPROC

DEFPROC pad4(%w)
  IF %w < 10 THEN ENDPROC ="    "
  IF %w < 100 THEN ENDPROC ="   "
  IF %w < 1000 THEN ENDPROC ="  "
  IF %w < 10000 THEN ENDPROC =" "
ENDPROC =""

DEFPROC pad2(%w)
  IF %w < 10 THEN ENDPROC ="  "
  IF %w < 100 THEN ENDPROC =" "
ENDPROC =""

DEFPROC onAnyKey()
  PRINT AT 10,21;"Press key"
  REPEAT : REPEAT UNTIL INKEY$ =""
  REPEAT : REPEAT UNTIL INKEY$ <> "" OR ( IN 31=16)
  REPEAT : REPEAT UNTIL INKEY$ =""
  PRINT AT 10,21;"         "
ENDPROC

DEFPROC pickRandom()
  ; default seed is 1 - to change this we need to BANK #BANKRND DPOKE %1, %<16-bit> - but only during start game
  %r=% BANK #BANKRND USR 0
  BANK #BANKRND DPOKE %1,%r
ENDPROC =%r&3

DEFPROC loadAssets()
  BORDER 0: PAPER 0: CLS
  LOAD "./assets/font.bin" CODE 64000
  DPOKE 23606,63744: ; 64000-256 (256 = 8 * 32 control chars)
  LAYER 2,1
  PRINT CHR$ 2: ; trigger the font to be loaded on layer 2

  LOAD "assets/over-next-level.bin" BANK #BANKNEXTLEVEL

  ; shadow L2 ends at 14, so we start at 15
  LOAD "assets/marbles.pal" BANK #BANKPAL
  LAYER PALETTE 0 BANK #BANKPAL,0
  SPRITE PALETTE 0 BANK #BANKPAL,0
  ; custom black and white
  BORDER 0: INK 255: PAPER 254: CLS

  LOAD "assets/marbles.spr" BANK #BANKSPR
  SPRITE BANK #BANKSPR
  SPRITE PRINT 1
  SPRITE BORDER 1

  POKE 23658,0: ; turn off CAPS LOCK (for menu items)

  %i=0
  REPEAT
    READ %o
    BANK #BANKRND POKE %i,%o
    %i=%i+1
  REPEAT UNTIL %o=201
ENDPROC

DEFPROC reset()
  SPRITE PRINT 0
  SPRITE CLEAR
  LAYER CLEAR
  PALETTE CLEAR
  LAYER 0
  CLS
ENDPROC

##########################################
# Joystick 1 callback procedures
# - MUST use these exactly procedure names
##########################################
DEFPROC U1()
  LOCAL %y
  %y=% SPRITE AT (#POINTER,1)
  IF %y > 1 THEN SPRITE #POINTER,,%y-1,,,
ENDPROC
DEFPROC L1()
  LOCAL %x
  %x=% SPRITE AT (#POINTER,0)
  IF %x > 1 THEN SPRITE #POINTER,%x-1,,,,
ENDPROC
DEFPROC D1()
  LOCAL %y
  %y=% SPRITE AT (#POINTER,1)
  IF %y < (256-1) THEN SPRITE #POINTER,,%y+1,,,
ENDPROC
DEFPROC R1()
  LOCAL %x
  %x=% SPRITE AT (#POINTER,0)
  IF %x < (320-1) THEN SPRITE #POINTER,%x+1,,,,
ENDPROC
DEFPROC F1()
  PROC selectBlock()
ENDPROC
DEFPROC F2()
  PROC selectBlock()
ENDPROC
DEFPROC F3()
  PROC selectBlock()
ENDPROC

; 16-bit xorshift pseudorandom number generator
; ld bc,1 : ld a,b: rra: ld a,c: rra: xor b: ld b,a: ld a,c: rra: ld a,b: rra: xor c: ld c,a: xor b: ld b,a: ret
DATA 1,1,0,120,31,121,31,168,71,121,31,120,31,169,79,168,71,201: ; length: 18

#autoline
9000 DEFPROC installMouse()
9010 ON ERROR GO TO 9030
9020 .uninstall /nextzxos/mouse.drv
9030 .install /nextzxos/mouse.drv
9040 ON ERROR
9050 ENDPROC

9060 DEFPROC installInput()
9070 ON ERROR GO TO 9090
9080 .uninstall assets/input.drv
9090 .install assets/input.drv
9100 ON ERROR
9110 ENDPROC
